@page "/sensor"
@rendermode InteractiveServer
@inject OrchardCore.Blazor.Meadow.Services.SensorService SensorService
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient


@using AntDesign.Charts
@using Title = AntDesign.Charts.Title
@using global::Meadow
@using global::Meadow.Foundation.Spatial
@using global::Meadow.Units
@using static global::Meadow.Foundation.Sensors.Motion.Icm20948
@* @using DataChart = (DateTime date, double? value, string category); *@

<div class="container">
    <div class="content">
        <div class="image-container">
            <img src="Assets/meadow.png" alt="Meadow" />
        </div>
        <h1>Meadow Blazor</h1>
        <h2>IMU values from Jetson Nano</h2>

        <Tabs ActiveKeyChanged="OnTabChanged">
            <TabPane Key="1">
                <TabTemplate>Temperature</TabTemplate>
                <ChildContent>
                    <AntDesign.Charts.Line @ref="chart_temperature" Data="config_temperature.Data" Config="config_temperature" />
                </ChildContent>
            </TabPane>
            <TabPane Key="2">
                <TabTemplate>Acceleration</TabTemplate>
                <ChildContent>
                    <AntDesign.Charts.Line @ref="chart_acceleration" Data="config_acceleration.Data" Config="config_acceleration" />
                </ChildContent>
            </TabPane>
            <TabPane Key="3">
                <TabTemplate>Angular Velocity</TabTemplate>
                <ChildContent>
                    <AntDesign.Charts.Line @ref="chart_angular_velocity" Data="config_angular_velocity.Data" Config="config_angular_velocity" />
                </ChildContent>
            </TabPane>
            <TabPane Key="4">
                <TabTemplate>Magnetic Field</TabTemplate>
                <ChildContent>
                    <AntDesign.Charts.Line @ref="chart_magnetic_field" Data="config_magnetic_field.Data" Config="config_magnetic_field" />
                </ChildContent>
            </TabPane>
            <TabPane Key="5">
                <TabTemplate>Euler Orientation</TabTemplate>
                <ChildContent>
                    <AntDesign.Charts.Line @ref="chart_euler_angle" Data="config_euler_angle.Data" Config="config_euler_angle" />
                </ChildContent>
            </TabPane>
            <TabPane Key="6">
                <TabTemplate>Quaternion</TabTemplate>
                <ChildContent>
                    <AntDesign.Charts.Line @ref="chart_quaternion" Data="config_quaternion.Data" Config="config_quaternion" />
                </ChildContent>
            </TabPane>
        </Tabs>

        <div class="readings">
            <div class="reading">
                <span>Temperature:</span>
                <span>@SensorService.TemperatureValue</span>
            </div>
            <div class="reading">
                <span>Angle:</span>
                <span>@SensorService.AngleValue</span>
            </div>
            <div class="reading">
                <span>Acceleration:</span>
                <span>@SensorService.AccelerationValue</span>
            </div>
            <div class="reading">
                <span>Magnetic:</span>
                <span>@SensorService.MagneticValue</span>
            </div>
        </div>
    </div>
</div>

@code {
    private bool _isRendered = false;
    public string CurrentActiveChart = "1";
    public record DataChart(DateTime date, double? value, string category);
    IChartComponent chart_temperature = new Line();
    IChartComponent chart_acceleration = new Line();
    IChartComponent chart_angular_velocity = new Line();
    IChartComponent chart_magnetic_field = new Line();
    IChartComponent chart_euler_angle = new Line();
    IChartComponent chart_quaternion = new Line();

    List<DataChart> data_temperature = new();
    List<DataChart> data_acceleration = new();
    List<DataChart> data_angular_velocity = new();
    List<DataChart> data_magnetic_field = new();
    List<DataChart> data_euler_angle = new();
    List<DataChart> data_quaternion = new();


    LineConfig config_acceleration = new LineConfig
    {
        Padding = "auto",
        AutoFit = true,
        Smooth = true,
        SeriesField = "category",
        XField = "date",
        YField = "value"
    };
    LineConfig config_angular_velocity = new LineConfig
    {
        Padding = "auto",
        AutoFit = true,
        Smooth = true,
        SeriesField = "category",
        XField = "date",
        YField = "value",
    };
    LineConfig config_magnetic_field = new LineConfig
    {
        Padding = "auto",
        AutoFit = true,
        Smooth = true,
        SeriesField = "category",
        XField = "date",
        YField = "value"
    };
    LineConfig config_euler_angle = new LineConfig
    {
        Padding = "auto",
        AutoFit = true,
        Smooth = true,
        SeriesField = "category",
        XField = "date",
        YField = "value"
    }; LineConfig config_quaternion = new LineConfig
    {
        Padding = "auto",
        AutoFit = true,
        Smooth = true,
        SeriesField = "category",
        XField = "date",
        YField = "value"
    };

    Dictionary<DateTime, SensorData> sensorData = new();

    LineConfig config_temperature = new LineConfig
    {
        Padding = "auto",
        AutoFit = true,
        Smooth = true,
        SeriesField = "category",
        XField = "date",
        YField = "value"
        //SeriesField = "category",
        // XAxis = new ValueCatTimeAxis
        // {
        //     Type = "value"
        // },
        // YAxis = new ValueAxis
        // {
        //     Label = new BaseAxisLabel()
        // },
        @*responsive = true,*@
    };

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        _isRendered = true;
        UpdateDataCurrentTab().GetAwaiter();

    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        SensorService.StateChanged += OnSensorChanged;

        // Simulate data for testing purposes
        //Task.Run(async () => await AddFakeData());
    }

    private async Task AddFakeData()
    {
        var autoRand = new Random();

        for (int i = 0; i < 100; i++)
        {
            OnSensorChanged(new ChangeResult<SensorData>(new SensorData()
            {
                Acceleration3D = new Acceleration3D(autoRand.NextDouble(), autoRand.NextDouble(), autoRand.NextDouble()),
                AngularVelocity3D = new AngularVelocity3D(autoRand.NextDouble(), autoRand.NextDouble(), autoRand.NextDouble()),
                MagneticField3D = new MagneticField3D(autoRand.NextDouble(), autoRand.NextDouble(), autoRand.NextDouble()),
                EulerOrientation = new EulerAngles(new Angle(autoRand.NextDouble()), new Angle(autoRand.NextDouble()), new Angle(autoRand.NextDouble())),
                QuaternionOrientation = new Quaternion(autoRand.NextDouble(), autoRand.NextDouble(), autoRand.NextDouble(), autoRand.NextDouble()),
                Temperature = new Temperature(autoRand.Next(20, 30)),
            }, null));
            await Task.Delay(2000);
        }
    }


    private void OnSensorChanged(IChangeResult<SensorData> e)
    {
        AddData(DateTime.UtcNow, e.New);
        if (_isRendered)
        {
            UpdateDataCurrentTab().GetAwaiter();
            InvokeAsync(StateHasChanged).GetAwaiter(); // for updating the text below the charts
        }
    }

    private async Task UpdateDataCurrentTab()
    {
        switch (CurrentActiveChart)
        {
            case "1":
                config_temperature.Data = data_temperature.ToArray<DataChart>();
                await chart_temperature.ChangeData(config_temperature.Data);
                break;
            case "2":
                config_acceleration.Data = data_acceleration.ToArray<DataChart>();
                await chart_acceleration.ChangeData(config_acceleration.Data);
                break;
            case "3":
                config_angular_velocity.Data = data_angular_velocity.ToArray<DataChart>();
                await chart_angular_velocity.ChangeData(config_angular_velocity.Data);
                break;
            case "4":
                config_magnetic_field.Data = data_magnetic_field.ToArray<DataChart>();
                await chart_magnetic_field.ChangeData(config_magnetic_field.Data);
                break;
            case "5":
                config_euler_angle.Data = data_euler_angle.ToArray<DataChart>();
                await chart_euler_angle.ChangeData(config_euler_angle.Data);
                break;
            case "6":
                config_quaternion.Data = data_quaternion.ToArray<DataChart>();
                await chart_quaternion.ChangeData(config_quaternion.Data);
                break;
        }
    }
    private async Task OnTabChanged(string activeKey)
    {
        CurrentActiveChart = activeKey;
        if (_isRendered)
        {
            await UpdateDataCurrentTab();
        }
    }

    private void AddData(DateTime date, SensorData data)
    {
        sensorData.Add(DateTime.UtcNow, data);
        if (sensorData.Count > 100)
        {
            sensorData.Remove(sensorData.Keys.First());
            data_temperature.RemoveAt(0);
            for (int i = 0; i < 3; i++)
            {
                data_acceleration.RemoveAt(0);
                data_angular_velocity.RemoveAt(0);
                data_magnetic_field.RemoveAt(0);
            }

        }
        data_temperature.Add(new DataChart(date, data.Temperature.Celsius, "temperature"));
        data_acceleration.AddRange(new[]{
            new DataChart(date, data.Acceleration3D.X.Gravity, "acceleration_x"),
            new DataChart(date, data.Acceleration3D.Y.Gravity, "acceleration_y"),
            new DataChart(date, data.Acceleration3D.Z.Gravity, "acceleration_z")
        });
        data_angular_velocity.AddRange(new[]{
            new DataChart(date, data.AngularVelocity3D.X.RadiansPerSecond, "angular_velocity_x"),
            new DataChart(date, data.AngularVelocity3D.Y.RadiansPerSecond, "angular_velocity_y"),
            new DataChart(date, data.AngularVelocity3D.Z.RadiansPerSecond, "angular_velocity_z")
        });
        data_magnetic_field.AddRange(new[]{
            new DataChart(date, data.MagneticField3D.X.Tesla, "magnetic_field_x"),
            new DataChart(date, data.MagneticField3D.Y.Tesla, "magnetic_field_y"),
            new DataChart(date, data.MagneticField3D.Z.Tesla, "magnetic_field_z")
        });
        data_euler_angle.AddRange(new[]{
            new DataChart(date, data.EulerOrientation.Heading.Degrees, "euler_orientation_yaw"),
            new DataChart(date, data.EulerOrientation.Pitch.Degrees, "euler_orientation_pitch"),
            new DataChart(date, data.EulerOrientation.Roll.Degrees, "euler_orientation_roll")
        });
        data_quaternion.AddRange(new[]{
            new DataChart(date, data.QuaternionOrientation.W, "quaternion_orientation_w"),
            new DataChart(date, data.QuaternionOrientation.X, "quaternion_orientation_x"),
            new DataChart(date, data.QuaternionOrientation.Y, "quaternion_orientation_y"),
            new DataChart(date, data.QuaternionOrientation.Z, "quaternion_orientation_z")
        });
    }

    private void Dispose()
    {
        if (SensorService != null)
            SensorService.StateChanged -= OnSensorChanged;
    }

}